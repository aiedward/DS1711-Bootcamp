

////////// Spark graphFrame. //////////////////


# in order to use graph frame, user must load pyspark with package 1.6
pyspark --packages graphframes:graphframes:0.1.0-spark1.6


from graphframes import *

# Create a Vertex DataFrame with unique ID column "id"
v = sqlContext.createDataFrame([
  ("a", "Alice", 34),
  ("b", "Bob", 36),
  ("c", "Charlie", 30),
  ("d", "David", 29),
  ("e", "Esther", 32),
  ("f", "Fanny", 36)
], ["id", "name", "age"])

e = sqlContext.createDataFrame([
  ("a", "e", "friend"),
  ("f", "b", "follow"),
  ("c", "e", "friend"),
  ("a", "b", "friend"),
  ("b", "c", "follow"),
  ("c", "b", "follow"),
  ("f", "c", "follow"),
  ("e", "f", "follow"),
  ("e", "d", "friend"),
  ("d", "a", "friend")
], ["src", "dst", "relationship"])

g = GraphFrame(v, e)

print g

g.edges.show()

g.vertices.show()

g.vertices.filter("age > 25").show()

temp = g.vertices.filter("age > 35")

g.inDegrees.show()
g.inDegrees.filter("inDegree >= 2")

g.outDegrees.show()
g.outDegrees.filter(â€œoutDegree >= 2")

g.degrees.show()

# find pattern
# Motif: A->B->C but not A->C
results = g.find("(A)-[]->(B); (B)-[]->(C); !(A)-[]->(C)")

results = g.find("(A)-[]->(B); (B)-[]->(C); (A)-[]->(C)")

results = g.find("(A)-[]->(B); (B)-[]->(A)")

#sub-graph
v2 = g.vertices.filter("age > 30")
e2 = g.edges.filter("relationship = 'friend'")
g2 = GraphFrame(v2, e2)

# Select subgraph based on edges "e" of type "follow"
# pointing from a younger user "a" to an older user "b".
paths = g.find("(a)-[e]->(b)")\
  .filter("e.relationship = 'follow'")\
  .filter("a.age < b.age")
# "paths" contains vertex info. Extract the edges.
e2 = paths.select("e.src", "e.dst", "e.relationship")
# In Spark 1.5+, the user may simplify this call:
#  val e2 = paths.select("e.*")

# Construct the subgraph
g2 = GraphFrame(g.vertices, e2)

Breadth-first search (BFS)
# Search from "Esther" for users of age < 32.
paths = g.bfs("name = 'Esther'", "age < 32")
paths.show()

# Specify edge filters or max path lengths.
g.bfs("name = 'Esther'", "age < 32",\
  edgeFilter="relationship != 'friend'", maxPathLength=3)


#connect component
results = g.connectedComponents()
results.select("id", "component").orderBy("component").show()

results = g.stronglyConnectedComponents(maxIter=10)
results.select("id", "component").orderBy("component").show()

#shortest path
results = g.shortestPaths(landmarks=["a", "d"])
results.select("id", "distances").show()


v2 = sqlContext.createDataFrame([
  ("a", "Alice", 34),
  ("b", "Bob", 36),
  ("c", "Charlie", 30),
  ("d", "David", 29),
  ("e", "Esther", 32),
  ("f", "Fanny", 36),
  ("g", "Jason", 36),
  ("h", "Celine", 26)
], ["id", "name", "age"])

e2 = sqlContext.createDataFrame([
  ("a", "e", "friend"),
  ("f", "b", "follow"),
  ("c", "e", "friend"),
  ("a", "b", "friend"),
  ("b", "c", "follow"),
  ("c", "b", "follow"),
  ("f", "c", "follow"),
  ("e", "f", "follow"),
  ("e", "d", "friend"),
  ("d", "a", "friend"),
  ("g", "h", "friend")
], ["src", "dst", "relationship"])

g2 = GraphFrame(v, e)


# Run PageRank algorithm, and show results.
results = g.pageRank(resetProbability=0.01, maxIter=20)
print results;

results.vertices.select("id", "pagerank").show()
results.vertices.show()


#Graph IO
# Save vertices and edges as Parquet to some location.
g.vertices.write.parquet("hdfs://myLocation/vertices")
g.edges.write.parquet("hdfs://myLocation/edges")

# Load the vertices and edges back.
sameV = sqlContext.read.parquet("hdfs://myLocation/vertices")
sameE = sqlContext.read.parquet("hdfs://myLocation/edges")

# Create an identical GraphFrame.
sameG = GraphFrame(sameV, sameE)


